"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationController = void 0;
const common_1 = require("@nestjs/common");
const notification_service_1 = require("../services/notification.service");
const notification_dto_1 = require("../dto/notification.dto");
const jwt_auth_guard_1 = require("../guards/jwt-auth.guard");
const current_user_decorator_1 = require("../decorators/current-user.decorator");
const notification_model_1 = require("../models/notification.model");
let NotificationController = class NotificationController {
    notificationService;
    constructor(notificationService) {
        this.notificationService = notificationService;
    }
    async create(createNotificationDto) {
        const notification = await this.notificationService.create(createNotificationDto);
        return {
            success: true,
            message: 'Tạo thông báo thành công',
            data: notification
        };
    }
    async findAll(query, user) {
        if (!query.userId) {
            query.userId = user.id;
        }
        const result = await this.notificationService.findAll(query);
        return {
            success: true,
            message: 'Lấy danh sách thông báo thành công',
            data: result
        };
    }
    async getUnreadCount(user) {
        const count = await this.notificationService.getUnreadCount(user.id);
        return {
            success: true,
            message: 'Lấy số thông báo chưa đọc thành công',
            data: { unreadCount: count }
        };
    }
    async getSystemNotifications() {
        const notifications = await this.notificationService.getSystemNotifications();
        return {
            success: true,
            message: 'Lấy thông báo hệ thống thành công',
            data: notifications
        };
    }
    async getAutoGeneratedNotifications() {
        const notifications = await this.notificationService.getAutoGeneratedNotifications();
        return {
            success: true,
            message: 'Lấy thông báo tự động thành công',
            data: notifications
        };
    }
    async findByType(type, user) {
        const notifications = await this.notificationService.findByType(type, user.id);
        return {
            success: true,
            message: `Lấy thông báo loại ${type} thành công`,
            data: notifications
        };
    }
    async findByPriority(priority, user) {
        const notifications = await this.notificationService.findByPriority(priority, user.id);
        return {
            success: true,
            message: `Lấy thông báo mức độ ${priority} thành công`,
            data: notifications
        };
    }
    async findByUser(userId) {
        const result = await this.notificationService.findAll({ userId });
        return {
            success: true,
            message: 'Lấy thông báo của user thành công',
            data: result
        };
    }
    async findOne(id) {
        const notification = await this.notificationService.findOne(id);
        return {
            success: true,
            message: 'Lấy thông báo thành công',
            data: notification
        };
    }
    async update(id, updateNotificationDto) {
        const notification = await this.notificationService.update(id, updateNotificationDto);
        return {
            success: true,
            message: 'Cập nhật thông báo thành công',
            data: notification
        };
    }
    async markAsRead(id) {
        const notification = await this.notificationService.markAsRead(id);
        return {
            success: true,
            message: 'Đánh dấu đã đọc thành công',
            data: notification
        };
    }
    async markAsUnread(id) {
        const notification = await this.notificationService.markAsUnread(id);
        return {
            success: true,
            message: 'Đánh dấu chưa đọc thành công',
            data: notification
        };
    }
    async markAllAsRead(user) {
        const result = await this.notificationService.markAllAsRead(user.id);
        return {
            success: true,
            message: 'Đánh dấu tất cả đã đọc thành công',
            data: result
        };
    }
    async createBroadcastNotification(body) {
        const notification = await this.notificationService.createBroadcastNotification(body.title, body.message, body.priority, body.metadata);
        return {
            success: true,
            message: 'Gửi thông báo broadcast thành công',
            data: notification
        };
    }
    async remove(id) {
        await this.notificationService.remove(id);
        return {
            success: true,
            message: 'Xóa thông báo thành công'
        };
    }
    async cleanupExpiredNotifications() {
        const result = await this.notificationService.deleteExpiredNotifications();
        return {
            success: true,
            message: 'Dọn dẹp thông báo hết hạn thành công',
            data: result
        };
    }
};
exports.NotificationController = NotificationController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [notification_dto_1.CreateNotificationDto]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    __param(0, (0, common_1.Query)()),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [notification_dto_1.NotificationQueryDto, Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('unread-count'),
    __param(0, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "getUnreadCount", null);
__decorate([
    (0, common_1.Get)('system'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "getSystemNotifications", null);
__decorate([
    (0, common_1.Get)('auto-generated'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "getAutoGeneratedNotifications", null);
__decorate([
    (0, common_1.Get)('type/:type'),
    __param(0, (0, common_1.Param)('type')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "findByType", null);
__decorate([
    (0, common_1.Get)('priority/:priority'),
    __param(0, (0, common_1.Param)('priority')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "findByPriority", null);
__decorate([
    (0, common_1.Get)('user/:userId'),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "findByUser", null);
__decorate([
    (0, common_1.Get)(':id'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, notification_dto_1.UpdateNotificationDto]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "update", null);
__decorate([
    (0, common_1.Patch)(':id/read'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "markAsRead", null);
__decorate([
    (0, common_1.Patch)(':id/unread'),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "markAsUnread", null);
__decorate([
    (0, common_1.Patch)('mark-all-read'),
    __param(0, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "markAllAsRead", null);
__decorate([
    (0, common_1.Post)('system/broadcast'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "createBroadcastNotification", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "remove", null);
__decorate([
    (0, common_1.Delete)('cleanup/expired'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationController.prototype, "cleanupExpiredNotifications", null);
exports.NotificationController = NotificationController = __decorate([
    (0, common_1.Controller)('notifications'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    __metadata("design:paramtypes", [notification_service_1.NotificationService])
], NotificationController);
//# sourceMappingURL=notification.controller.js.map