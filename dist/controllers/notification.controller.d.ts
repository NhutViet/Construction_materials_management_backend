import { NotificationService } from '../services/notification.service';
import { CreateNotificationDto, UpdateNotificationDto, NotificationQueryDto } from '../dto/notification.dto';
import { NotificationType, NotificationPriority } from '../models/notification.model';
export declare class NotificationController {
    private readonly notificationService;
    constructor(notificationService: NotificationService);
    create(createNotificationDto: CreateNotificationDto): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    findAll(query: NotificationQueryDto, user: any): Promise<{
        success: boolean;
        message: string;
        data: {
            notifications: import("../models/notification.model").Notification[];
            total: number;
            page: number;
            limit: number;
        };
    }>;
    getUnreadCount(user: any): Promise<{
        success: boolean;
        message: string;
        data: {
            unreadCount: number;
        };
    }>;
    getSystemNotifications(): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification[];
    }>;
    getAutoGeneratedNotifications(): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification[];
    }>;
    findByType(type: NotificationType, user: any): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification[];
    }>;
    findByPriority(priority: NotificationPriority, user: any): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification[];
    }>;
    findByUser(userId: string): Promise<{
        success: boolean;
        message: string;
        data: {
            notifications: import("../models/notification.model").Notification[];
            total: number;
            page: number;
            limit: number;
        };
    }>;
    findOne(id: string): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    update(id: string, updateNotificationDto: UpdateNotificationDto): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    markAsRead(id: string): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    markAsUnread(id: string): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    markAllAsRead(user: any): Promise<{
        success: boolean;
        message: string;
        data: {
            modifiedCount: number;
        };
    }>;
    createBroadcastNotification(body: {
        title: string;
        message: string;
        priority?: NotificationPriority;
        metadata?: any;
    }): Promise<{
        success: boolean;
        message: string;
        data: import("../models/notification.model").Notification;
    }>;
    remove(id: string): Promise<{
        success: boolean;
        message: string;
    }>;
    cleanupExpiredNotifications(): Promise<{
        success: boolean;
        message: string;
        data: {
            deletedCount: number;
        };
    }>;
}
