import { Document, Types } from 'mongoose';
export type NotificationDocument = Notification & Document;
export declare enum NotificationType {
    MATERIAL = "material",
    INVOICE = "invoice",
    STOCK_IN = "stock-in",
    USER = "user",
    SYSTEM = "system"
}
export declare enum NotificationPriority {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    URGENT = "urgent"
}
export declare enum NotificationStatus {
    UNREAD = "unread",
    READ = "read",
    ARCHIVED = "archived"
}
export declare class Notification {
    title: string;
    message: string;
    type: NotificationType;
    priority: NotificationPriority;
    status: NotificationStatus;
    userId?: Types.ObjectId;
    relatedEntityId?: Types.ObjectId;
    relatedEntityType?: string;
    metadata?: any;
    isAutoGenerated: boolean;
    expiresAt?: Date;
    readAt?: Date;
    isDeleted: boolean;
}
export declare const NotificationSchema: import("mongoose").Schema<Notification, import("mongoose").Model<Notification, any, any, any, Document<unknown, any, Notification, any, {}> & Notification & {
    _id: Types.ObjectId;
} & {
    __v: number;
}, any>, {}, {}, {}, {}, import("mongoose").DefaultSchemaOptions, Notification, Document<unknown, {}, import("mongoose").FlatRecord<Notification>, {}, import("mongoose").ResolveSchemaOptions<import("mongoose").DefaultSchemaOptions>> & import("mongoose").FlatRecord<Notification> & {
    _id: Types.ObjectId;
} & {
    __v: number;
}>;
