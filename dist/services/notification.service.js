"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const notification_model_1 = require("../models/notification.model");
let NotificationService = class NotificationService {
    notificationModel;
    constructor(notificationModel) {
        this.notificationModel = notificationModel;
    }
    async create(createNotificationDto) {
        const notification = new this.notificationModel({
            ...createNotificationDto,
            relatedEntityId: createNotificationDto.relatedEntityId ? new mongoose_2.Types.ObjectId(createNotificationDto.relatedEntityId) : undefined,
            userId: createNotificationDto.userId ? new mongoose_2.Types.ObjectId(createNotificationDto.userId) : undefined,
        });
        return notification.save();
    }
    async findAll(query) {
        const { type, priority, status, userId, isAutoGenerated, search, page = '1', limit = '10', sortBy = 'createdAt', sortOrder = 'desc' } = query;
        const filter = { isDeleted: false };
        if (type)
            filter.type = type;
        if (priority)
            filter.priority = priority;
        if (status)
            filter.status = status;
        if (userId)
            filter.userId = new mongoose_2.Types.ObjectId(userId);
        if (isAutoGenerated !== undefined)
            filter.isAutoGenerated = isAutoGenerated;
        if (search) {
            filter.$or = [
                { title: { $regex: search, $options: 'i' } },
                { message: { $regex: search, $options: 'i' } }
            ];
        }
        const sort = {};
        sort[sortBy] = sortOrder === 'asc' ? 1 : -1;
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);
        const skip = (pageNum - 1) * limitNum;
        const [notifications, total] = await Promise.all([
            this.notificationModel
                .find(filter)
                .sort(sort)
                .skip(skip)
                .limit(limitNum)
                .populate('userId', 'username fullname')
                .exec(),
            this.notificationModel.countDocuments(filter)
        ]);
        return {
            notifications,
            total,
            page: pageNum,
            limit: limitNum
        };
    }
    async findOne(id) {
        const notification = await this.notificationModel
            .findOne({ _id: id, isDeleted: false })
            .populate('userId', 'username fullname')
            .exec();
        if (!notification) {
            throw new common_1.NotFoundException('Thông báo không tồn tại');
        }
        return notification;
    }
    async update(id, updateNotificationDto) {
        const updateData = { ...updateNotificationDto };
        if (updateNotificationDto.relatedEntityId) {
            updateData.relatedEntityId = new mongoose_2.Types.ObjectId(updateNotificationDto.relatedEntityId);
        }
        const notification = await this.notificationModel.findOneAndUpdate({ _id: id, isDeleted: false }, updateData, { new: true }).populate('userId', 'username fullname');
        if (!notification) {
            throw new common_1.NotFoundException('Thông báo không tồn tại');
        }
        return notification;
    }
    async remove(id) {
        const notification = await this.notificationModel.findOneAndUpdate({ _id: id, isDeleted: false }, { isDeleted: true });
        if (!notification) {
            throw new common_1.NotFoundException('Thông báo không tồn tại');
        }
    }
    async markAsRead(id) {
        const notification = await this.notificationModel.findOneAndUpdate({ _id: id, isDeleted: false }, {
            status: notification_model_1.NotificationStatus.READ,
            readAt: new Date()
        }, { new: true }).populate('userId', 'username fullname');
        if (!notification) {
            throw new common_1.NotFoundException('Thông báo không tồn tại');
        }
        return notification;
    }
    async markAsUnread(id) {
        const notification = await this.notificationModel.findOneAndUpdate({ _id: id, isDeleted: false }, {
            status: notification_model_1.NotificationStatus.UNREAD,
            readAt: undefined
        }, { new: true }).populate('userId', 'username fullname');
        if (!notification) {
            throw new common_1.NotFoundException('Thông báo không tồn tại');
        }
        return notification;
    }
    async markAllAsRead(userId) {
        const filter = {
            isDeleted: false,
            status: notification_model_1.NotificationStatus.UNREAD
        };
        if (userId) {
            filter.userId = new mongoose_2.Types.ObjectId(userId);
        }
        const result = await this.notificationModel.updateMany(filter, {
            status: notification_model_1.NotificationStatus.READ,
            readAt: new Date()
        });
        return { modifiedCount: result.modifiedCount };
    }
    async getUnreadCount(userId) {
        const filter = {
            isDeleted: false,
            status: notification_model_1.NotificationStatus.UNREAD
        };
        if (userId) {
            filter.userId = new mongoose_2.Types.ObjectId(userId);
        }
        return this.notificationModel.countDocuments(filter);
    }
    async findByType(type, userId) {
        const filter = {
            type,
            isDeleted: false
        };
        if (userId) {
            filter.userId = new mongoose_2.Types.ObjectId(userId);
        }
        return this.notificationModel
            .find(filter)
            .sort({ createdAt: -1 })
            .populate('userId', 'username fullname')
            .exec();
    }
    async findByPriority(priority, userId) {
        const filter = {
            priority,
            isDeleted: false
        };
        if (userId) {
            filter.userId = new mongoose_2.Types.ObjectId(userId);
        }
        return this.notificationModel
            .find(filter)
            .sort({ createdAt: -1 })
            .populate('userId', 'username fullname')
            .exec();
    }
    async getSystemNotifications() {
        return this.notificationModel
            .find({
            type: notification_model_1.NotificationType.SYSTEM,
            isDeleted: false
        })
            .sort({ createdAt: -1 })
            .populate('userId', 'username fullname')
            .exec();
    }
    async getAutoGeneratedNotifications() {
        return this.notificationModel
            .find({
            isAutoGenerated: true,
            isDeleted: false
        })
            .sort({ createdAt: -1 })
            .populate('userId', 'username fullname')
            .exec();
    }
    async createAutoNotification(title, message, type, priority = notification_model_1.NotificationPriority.MEDIUM, userId, relatedEntityId, relatedEntityType, metadata) {
        return this.create({
            title,
            message,
            type,
            priority,
            userId,
            relatedEntityId,
            relatedEntityType,
            metadata,
            isAutoGenerated: true
        });
    }
    async createBroadcastNotification(title, message, priority = notification_model_1.NotificationPriority.MEDIUM, metadata) {
        return this.create({
            title,
            message,
            type: notification_model_1.NotificationType.SYSTEM,
            priority,
            metadata,
            isAutoGenerated: false
        });
    }
    async deleteExpiredNotifications() {
        const result = await this.notificationModel.updateMany({
            expiresAt: { $lt: new Date() },
            isDeleted: false
        }, { isDeleted: true });
        return { deletedCount: result.modifiedCount };
    }
};
exports.NotificationService = NotificationService;
exports.NotificationService = NotificationService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(notification_model_1.Notification.name)),
    __metadata("design:paramtypes", [mongoose_2.Model])
], NotificationService);
//# sourceMappingURL=notification.service.js.map