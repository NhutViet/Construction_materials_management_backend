import { Model } from 'mongoose';
import { Notification, NotificationDocument, NotificationType, NotificationPriority } from '../models/notification.model';
import { CreateNotificationDto, UpdateNotificationDto, NotificationQueryDto } from '../dto/notification.dto';
export declare class NotificationService {
    private notificationModel;
    constructor(notificationModel: Model<NotificationDocument>);
    create(createNotificationDto: CreateNotificationDto): Promise<Notification>;
    findAll(query: NotificationQueryDto): Promise<{
        notifications: Notification[];
        total: number;
        page: number;
        limit: number;
    }>;
    findOne(id: string): Promise<Notification>;
    findOneIncludingDeleted(id: string): Promise<Notification | null>;
    findOneIncludingDeletedForAuth(id: string): Promise<Notification | null>;
    update(id: string, updateNotificationDto: UpdateNotificationDto): Promise<Notification>;
    remove(id: string): Promise<void>;
    markAsRead(id: string): Promise<Notification>;
    markAsUnread(id: string): Promise<Notification>;
    markAllAsRead(userId?: string): Promise<{
        modifiedCount: number;
    }>;
    getUnreadCount(userId?: string): Promise<number>;
    findByType(type: NotificationType, userId?: string): Promise<Notification[]>;
    findByPriority(priority: NotificationPriority, userId?: string): Promise<Notification[]>;
    getSystemNotifications(): Promise<Notification[]>;
    getAutoGeneratedNotifications(): Promise<Notification[]>;
    createAutoNotification(title: string, message: string, type: NotificationType, priority?: NotificationPriority, userId?: string, relatedEntityId?: string, relatedEntityType?: string, metadata?: any): Promise<Notification>;
    createBroadcastNotification(title: string, message: string, priority?: NotificationPriority, metadata?: any): Promise<Notification>;
    deleteExpiredNotifications(): Promise<{
        deletedCount: number;
    }>;
}
