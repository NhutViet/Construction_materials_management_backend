import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Logger,
  UseGuards,
} from '@nestjs/common';
import { MaterialService } from '../services/material.service';
import { Material } from '../models/material.model';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { CurrentUser } from '../decorators/current-user.decorator';

@Controller('materials')
@UseGuards(JwtAuthGuard)
export class MaterialController {
  private readonly logger = new Logger(MaterialController.name);

  constructor(private readonly materialService: MaterialService) {}

  @Post()
  create(@Body() createMaterialDto: Partial<Material>, @CurrentUser() user: any) {
    this.logger.log(`üìù POST /materials - T·∫°o v·∫≠t li·ªáu m·ªõi: ${createMaterialDto.name} cho user: ${user.id}`);
    return this.materialService.create(createMaterialDto, user.id);
  }

  @Get()
  findAll(@CurrentUser() user: any) {
    this.logger.log(`üîç GET /materials - L·∫•y danh s√°ch v·∫≠t li·ªáu cho user: ${user.id}`);
    return this.materialService.findAll(user.id);
  }

  @Get('low-stock')
  findLowStock(@CurrentUser() user: any) {
    this.logger.log(`‚ö†Ô∏è GET /materials/low-stock - L·∫•y danh s√°ch v·∫≠t li·ªáu s·∫Øp h·∫øt cho user: ${user.id}`);
    return this.materialService.findLowStock(10, user.id);
  }

  @Get('category/:category')
  findByCategory(@Param('category') category: string, @CurrentUser() user: any) {
    this.logger.log(`üîç GET /materials/category/${category} - L·∫•y v·∫≠t li·ªáu theo danh m·ª•c cho user: ${user.id}`);
    return this.materialService.findByCategory(category, user.id);
  }

  @Get(':id')
  findOne(@Param('id') id: string, @CurrentUser() user: any) {
    this.logger.log(`üîç GET /materials/${id} - L·∫•y th√¥ng tin v·∫≠t li·ªáu theo ID cho user: ${user.id}`);
    return this.materialService.findOne(id, user.id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateMaterialDto: Partial<Material>, @CurrentUser() user: any) {
    this.logger.log(`üîÑ PATCH /materials/${id} - C·∫≠p nh·∫≠t v·∫≠t li·ªáu cho user: ${user.id}`);
    return this.materialService.update(id, updateMaterialDto, user.id);
  }

  @Delete(':id')
  remove(@Param('id') id: string, @CurrentUser() user: any) {
    this.logger.log(`üóëÔ∏è DELETE /materials/${id} - X√≥a v·∫≠t li·ªáu cho user: ${user.id}`);
    return this.materialService.remove(id, user.id);
  }
}
