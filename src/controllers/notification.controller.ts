import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  HttpStatus,
  HttpCode,
  NotFoundException,
} from '@nestjs/common';
import { NotificationService } from '../services/notification.service';
import { CreateNotificationDto, UpdateNotificationDto, NotificationQueryDto, MarkAsReadDto } from '../dto/notification.dto';
import { JwtAuthGuard } from '../guards/jwt-auth.guard';
import { CurrentUser } from '../decorators/current-user.decorator';
import { NotificationType, NotificationPriority } from '../models/notification.model';

@Controller('notifications')
@UseGuards(JwtAuthGuard)
export class NotificationController {
  constructor(private readonly notificationService: NotificationService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  async create(@Body() createNotificationDto: CreateNotificationDto, @CurrentUser() user: any) {
    // Tự động gán userId từ user hiện tại
    createNotificationDto.userId = user.id;
    
    const notification = await this.notificationService.create(createNotificationDto);
    return {
      success: true,
      message: 'Tạo thông báo thành công',
      data: notification
    };
  }

  @Get()
  async findAll(@Query() query: NotificationQueryDto, @CurrentUser() user: any) {
    // Chỉ lấy thông báo của user hiện tại
    query.userId = user.id;

    const result = await this.notificationService.findAll(query);
    return {
      success: true,
      message: 'Lấy danh sách thông báo thành công',
      data: result
    };
  }

  @Get('unread-count')
  async getUnreadCount(@CurrentUser() user: any) {
    const count = await this.notificationService.getUnreadCount(user.id);
    return {
      success: true,
      message: 'Lấy số thông báo chưa đọc thành công',
      data: { unreadCount: count }
    };
  }

  @Get('system')
  async getSystemNotifications() {
    const notifications = await this.notificationService.getSystemNotifications();
    return {
      success: true,
      message: 'Lấy thông báo hệ thống thành công',
      data: notifications
    };
  }

  @Get('auto-generated')
  async getAutoGeneratedNotifications() {
    const notifications = await this.notificationService.getAutoGeneratedNotifications();
    return {
      success: true,
      message: 'Lấy thông báo tự động thành công',
      data: notifications
    };
  }

  @Get('type/:type')
  async findByType(@Param('type') type: NotificationType, @CurrentUser() user: any) {
    const notifications = await this.notificationService.findByType(type, user.id);
    return {
      success: true,
      message: `Lấy thông báo loại ${type} thành công`,
      data: notifications
    };
  }

  @Get('priority/:priority')
  async findByPriority(@Param('priority') priority: NotificationPriority, @CurrentUser() user: any) {
    const notifications = await this.notificationService.findByPriority(priority, user.id);
    return {
      success: true,
      message: `Lấy thông báo mức độ ${priority} thành công`,
      data: notifications
    };
  }

  @Patch('mark-all-read')
  async markAllAsRead(@CurrentUser() user: any) {
    const result = await this.notificationService.markAllAsRead(user.id);
    return {
      success: true,
      message: 'Đánh dấu tất cả đã đọc thành công',
      data: result
    };
  }

  @Get(':id')
  async findOne(@Param('id') id: string, @CurrentUser() user: any) {
    const notification = await this.notificationService.findOne(id);
    
    // Kiểm tra xem thông báo có thuộc về user hiện tại không
    if (notification.userId && notification.userId.toString() !== user.id) {
      throw new NotFoundException('Thông báo không tồn tại');
    }
    
    return {
      success: true,
      message: 'Lấy thông báo thành công',
      data: notification
    };
  }

  @Patch(':id')
  async update(@Param('id') id: string, @Body() updateNotificationDto: UpdateNotificationDto, @CurrentUser() user: any) {
    const notification = await this.notificationService.findOne(id);
    
    // Kiểm tra xem thông báo có thuộc về user hiện tại không
    if (notification.userId && notification.userId.toString() !== user.id) {
      throw new NotFoundException('Thông báo không tồn tại');
    }
    
    const updatedNotification = await this.notificationService.update(id, updateNotificationDto);
    return {
      success: true,
      message: 'Cập nhật thông báo thành công',
      data: updatedNotification
    };
  }

  @Patch(':id/read')
  async markAsRead(@Param('id') id: string, @CurrentUser() user: any) {
    const notification = await this.notificationService.findOne(id);
    
    // Kiểm tra xem thông báo có thuộc về user hiện tại không
    if (notification.userId && notification.userId.toString() !== user.id) {
      throw new NotFoundException('Thông báo không tồn tại');
    }
    
    const updatedNotification = await this.notificationService.markAsRead(id);
    return {
      success: true,
      message: 'Đánh dấu đã đọc thành công',
      data: updatedNotification
    };
  }

  @Patch(':id/unread')
  async markAsUnread(@Param('id') id: string, @CurrentUser() user: any) {
    const notification = await this.notificationService.findOne(id);
    
    // Kiểm tra xem thông báo có thuộc về user hiện tại không
    if (notification.userId && notification.userId.toString() !== user.id) {
      throw new NotFoundException('Thông báo không tồn tại');
    }
    
    const updatedNotification = await this.notificationService.markAsUnread(id);
    return {
      success: true,
      message: 'Đánh dấu chưa đọc thành công',
      data: updatedNotification
    };
  }

  @Post('system/broadcast')
  async createBroadcastNotification(
    @Body() body: { title: string; message: string; priority?: NotificationPriority; metadata?: any }
  ) {
    const notification = await this.notificationService.createBroadcastNotification(
      body.title,
      body.message,
      body.priority,
      body.metadata
    );
    return {
      success: true,
      message: 'Gửi thông báo broadcast thành công',
      data: notification
    };
  }

  @Delete(':id')
  @HttpCode(HttpStatus.OK)
  async remove(@Param('id') id: string, @CurrentUser() user: any) {
    // Kiểm tra thông báo có tồn tại không (kể cả đã bị xóa) - không populate để dễ so sánh
    const notification = await this.notificationService.findOneIncludingDeletedForAuth(id);
    
    if (!notification) {
      throw new NotFoundException('Thông báo không tồn tại');
    }
    
    // Kiểm tra xem thông báo có thuộc về user hiện tại không
    // Chỉ kiểm tra nếu thông báo có userId (không phải thông báo hệ thống)
    if (notification.userId) {
      const notificationUserId = notification.userId.toString();
      const currentUserId = user.id.toString();
      
      // So sánh ObjectId string
      if (notificationUserId !== currentUserId) {
        throw new NotFoundException('Bạn không có quyền xóa thông báo này');
      }
    }
    
    // Kiểm tra thông báo đã bị xóa chưa
    if (notification.isDeleted) {
      throw new NotFoundException('Thông báo đã bị xóa trước đó');
    }
    
    await this.notificationService.remove(id);
    return {
      success: true,
      message: 'Xóa thông báo thành công'
    };
  }

  @Delete('cleanup/expired')
  async cleanupExpiredNotifications() {
    const result = await this.notificationService.deleteExpiredNotifications();
    return {
      success: true,
      message: 'Dọn dẹp thông báo hết hạn thành công',
      data: result
    };
  }
}
