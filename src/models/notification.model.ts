import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

export type NotificationDocument = Notification & Document;

export enum NotificationType {
  MATERIAL = 'material',
  INVOICE = 'invoice',
  STOCK_IN = 'stock-in',
  USER = 'user',
  SYSTEM = 'system',
}

export enum NotificationPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum NotificationStatus {
  UNREAD = 'unread',
  READ = 'read',
  ARCHIVED = 'archived',
}

@Schema({ timestamps: true })
export class Notification {
  @Prop({ required: true })
  title: string;

  @Prop({ required: true })
  message: string;

  @Prop({ 
    required: true, 
    enum: NotificationType,
    default: NotificationType.SYSTEM 
  })
  type: NotificationType;

  @Prop({ 
    required: true, 
    enum: NotificationPriority,
    default: NotificationPriority.MEDIUM 
  })
  priority: NotificationPriority;

  @Prop({ 
    required: true, 
    enum: NotificationStatus,
    default: NotificationStatus.UNREAD 
  })
  status: NotificationStatus;

  @Prop({ type: Types.ObjectId, ref: 'User', required: false })
  userId?: Types.ObjectId; // null nếu là broadcast

  @Prop({ type: Types.ObjectId, required: false })
  relatedEntityId?: Types.ObjectId; // ID của entity liên quan

  @Prop({ 
    enum: ['material', 'invoice', 'stock-in', 'user'],
    required: false 
  })
  relatedEntityType?: string;

  @Prop({ type: Object, required: false })
  metadata?: any; // Dữ liệu bổ sung

  @Prop({ default: false })
  isAutoGenerated: boolean;

  @Prop({ required: false })
  expiresAt?: Date;

  @Prop({ required: false })
  readAt?: Date;

  @Prop({ default: false })
  isDeleted: boolean; // Đánh dấu xóa mềm
}

export const NotificationSchema = SchemaFactory.createForClass(Notification);

// Indexes
NotificationSchema.index({ userId: 1, status: 1 });
NotificationSchema.index({ type: 1 });
NotificationSchema.index({ priority: 1 });
NotificationSchema.index({ createdAt: -1 });
NotificationSchema.index({ isDeleted: 1 });
NotificationSchema.index({ expiresAt: 1 });
